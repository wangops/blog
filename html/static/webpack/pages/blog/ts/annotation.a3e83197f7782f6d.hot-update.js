"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/blog/ts/annotation",{

/***/ "./src/pages/blog/ts/annotation.mdx":
/*!******************************************!*\
  !*** ./src/pages/blog/ts/annotation.mdx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MDXContent; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_mdx_import_source_file__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-mdx-import-source-file */ \"./src/mdx-components.tsx\");\n/* harmony import */ var react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-syntax-highlighter */ \"./node_modules/react-syntax-highlighter/dist/esm/index.js\");\n\n\n\nfunction _createMdxContent(props) {\n    const _components = {\n        h4: \"h4\",\n        h6: \"h6\",\n        p: \"p\",\n        ...(0,next_mdx_import_source_file__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n        ...props.components\n    };\n    return (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"mdx-box\",\n        children: [\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"Typescript 装饰器\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 6,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 7,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0\\xa0装饰器是一种特殊类型的声明，可以附加到类声明、方法、属性或参数上，用来修改其行为或者添加元数据。装饰器在设计模式中广泛应用，它们提供了一种优雅的语法来通过简单的注释方式给类和类成员添加功能。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 8,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 9,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"基本语法：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 10,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 11,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__.Prism, {\n                language: \"javascript\",\n                children: \"\\n        @decorator\\n        class MyClass {\\n            // class implementation\\n        }\\n\\n        @decorator\\n        function myFunction() {\\n            // function implementation\\n        }\\n\\n        class MyClass {\\n            @decorator\\n            myMethod() {\\n                // method implementation\\n            }\\n\\n            @decorator\\n            myProperty: string;\\n        }\\n\\n    \\n\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 12,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 37,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"装饰器本质上是一个函数，它接收不同数量的参数，具体取决于它附加的位置（类、方法、属性或参数）。装饰器函数可以返回任何值，具体返回值的影响取决于装饰器的目的和上下文。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 38,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 39,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"类装饰器：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 40,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 41,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"类装饰器在类声明之前声明，用来修改类的行为。类装饰器的声明如下：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 42,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 43,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__.Prism, {\n                language: \"javascript\",\n                children: \"\\n        function classDecorator<T extends { new(...args: any[]): {} }>(constructor: T) {\\n            return class extends constructor {\\n                // modified class behavior can be added here\\n            };\\n        }\\n\\n        @classDecorator\\n        class MyClass {\\n            // class implementation\\n        }\\n        \\n\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 44,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 59,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"类装饰器可以接收一个构造函数作为其唯一参数，并且可以返回一个新的构造函数，从而可以修改类的行为或者用来实现混入（Mixin）等模式。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 60,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 61,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"方法装饰器：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 63,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 64,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"方法装饰器用来修改类的方法，它接收三个参数：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 65,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 66,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  对于静态方法是类的构造函数，对于实例方法是类的原型对象。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 67,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 68,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  通过闭包可以创建私有变量和函数，使其不被外部访问，从而实现模块化和封装。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 69,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 70,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  通过闭包可以创建私有变量和函数，使其不被外部访问，从而实现模块化和封装。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 71,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 72,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__.Prism, {\n                language: \"javascript\",\n                children: \"\\n    let module = (function() {\\n    let privateVariable = 'I am private';\\n\\n    function privateFunction() {\\n        console.log('This is a private function');\\n    }\\n\\n    return {\\n        publicVariable: 'I am public',\\n        publicFunction: function() {\\n            console.log('This is a public function');\\n            privateFunction();\\n        }\\n    };\\n})();\\n\\nconsole.log(module.publicVariable); // 输出: I am public\\nmodule.publicFunction(); // 输出: This is a public function\\n                         // 输出: This is a private function\\n\\n\\n    \\n\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 73,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 99,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"闭包的应用场景：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 101,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 102,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  使用闭包可以创建私有变量和方法，防止全局污染。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 103,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 104,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  可以实现类似模块化的效果，将一组相关的函数和数据封装在一个作用域内。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 105,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 106,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  在异步编程中，闭包可以用来捕获当前的状态，比如事件处理器、回调函数等\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 107,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 108,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h4, {\n                children: \"注意事项：\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 109,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 110,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  由于闭包会保留外部函数的作用域，可能会导致内存泄漏，因此在使用闭包时要注意管理内存，避免不必要的变量捕获。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 111,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 112,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  可以实现类似模块化的效果，将一组相关的函数和数据封装在一个作用域内。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 113,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 114,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"\\xa0\\xa0\\xa0\\xa0  过度使用闭包可能会影响性能，特别是在循环中创建闭包时，要注意闭包的作用域和生命周期。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 115,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 116,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.p, {\n                children: \"闭包在 JavaScript 中是一个非常强大和灵活的概念，合理利用可以帮助我们编写更加模块化、可维护和安全的代码。\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 117,\n                columnNumber: 1\n            }, this),\n            (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components.h6, {\n                children: \"\\xa0\"\n            }, undefined, false, {\n                fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n                lineNumber: 118,\n                columnNumber: 1\n            }, this)\n        ]\n    }, undefined, true, {\n        fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\",\n        lineNumber: 5,\n        columnNumber: 1\n    }, this);\n}\nfunction MDXContent() {\n    let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { wrapper: MDXLayout } = {\n        ...(0,next_mdx_import_source_file__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),\n        ...props.components\n    };\n    return MDXLayout ? (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MDXLayout, {\n        ...props,\n        children: (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_createMdxContent, {\n            ...props\n        }, undefined, false, {\n            fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\"\n        }, this)\n    }, undefined, false, {\n        fileName: \"D:\\\\Dev\\\\Projects\\\\blog\\\\src\\\\pages\\\\blog\\\\ts\\\\annotation.mdx\"\n    }, this) : _createMdxContent(props);\n}\n_c = MDXContent;\nvar _c;\n$RefreshReg$(_c, \"MDXContent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvYmxvZy90cy9hbm5vdGF0aW9uLm1keCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQzJDOzs7Ozs7Ozs7Ozs7OzBCQUl0Qzs7Ozs7OzswQkFDRTs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7OzswQkFDRjs7Ozs7OzswQkFDRTs7Ozs7Ozs7MEJBRUg7Ozs7Ozs7MEJBd0JHOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNEOzs7Ozs7OzBCQUNDOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzswQkFFSDs7Ozs7OzswQkFjRzs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7OzswQkFFRDs7Ozs7OzswQkFDQzs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7OzswQkFDUDs7Ozs7OzswQkFDTzs7Ozs7Ozs7MEJBRUg7Ozs7Ozs7MEJBeUJHOzs7Ozs7OzBCQUVGOzs7Ozs7OzBCQUNFOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNGOzs7Ozs7OzBCQUNFOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPOzs7Ozs7OzBCQUNQOzs7Ozs7OzBCQUNPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9wYWdlcy9ibG9nL3RzL2Fubm90YXRpb24ubWR4PzM2ZmEiXSwibmFtZXMiOlsiUHJpc20iLCJTeW50YXhIaWdobGlnaHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pages/blog/ts/annotation.mdx\n"));

/***/ })

});